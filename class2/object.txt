# Object 的变化侦测

vue.js 的 变化侦测属于'推'，当状态发生变化的时候，向这个状态的所有依赖发送通知，让他们进行DOM更新操作。

而每个状态的依赖绑定越多，依赖追踪在内存中的开销也就越大。因此，引入了虚拟DOM， 将粒度调整为中等粒度，将状态绑定的依赖由DOM节点调整
为组件，状态变化后，组件再通过虚拟DOM进行对比，从而降低内存消耗。

## 如何追踪变化

Object.defineProperty 和 ES6 的 Proxy

function defineReactive(data, key, val) {
    Object.defineProperty(data, key, {
        enumerable: true,
        configurable: true,
        get: function() {
            return val;
        },
        set: function() {
           if (val === newVal) {
                return
           }
           val = newVal;
        },
    })
}

## 如何收集依赖

总结：在getter中收集依赖，在setter中触发依赖

## 依赖收集在哪里

我们将每一个属性所有的依赖存放到一个数组dep中, 每一个依赖都是一个函数

export default class Dep {
    constructor() {
        this.subs = [];
    }

    addSub(sub) {
        this.subs.push(sub);
    }

    removeSub(sub) {
        remove(this.subs, sub);
    }

    depend() {
        if(window.target) {
            this.addSub(window.target);
        }
    }

    notify() {
        const subs = this.subs.slice();
        for (let i = 0, l = subs.length; i < l; i ++) {
            subs[i].update();
        }
    }
}

function remove(arr, item) {
    if (arr.length) {
        const index = arr.indexOf(item);
        if (index > -1) {
            return arr.splice(index, 1);
        }
    }
}

function defineReactive(data, key ,val) {
    let dep = new Dep(); // 新增
    Object.defineProperty(data, key, {
        enumerable: true,
        configurable: true,
        get: function() {
            dep.depend(); // 新增
            return val;
        },
        set: function() {
            if (val === newVal) {
                    return
            }   
            val = newVal;
            dep.notify(); // 新增
        },
    })
}

## 依赖是谁

我们究竟要收集谁 ？
收集谁，换句话说， 就是当属性发生变化后，通知谁， 我们就收集谁。
那我们集中将这种依赖定义成类 => 取名叫 Watcher

## Watcher

export default class Watcher {
    constructor (vm, expOrFn, cb) {
        this.vm = vm;
        // 执行this.getter(), 就可以读取属性(例如: data.a.b.c)的内容
        this.getter = parsePath(expOrFn);
        this.cb = cb;
        this.value = this.get();
    }

    get () {
        window.target = this;
        let value = this.getter.call(this.vm, this.vm);
        window.target = undefined;
        return value;
    }

    update() {
        const oldValue = this.value;
        this.value = this.get();
        this.cb.call(this.vm, this.value, oldValue);
    }
}

/**
 * 解析简单路径
 */
 const baiRE = /[^\w.$]/;
 export function parsePath(path) {
     if (baiRE.test(path)) {
         return;
     }
     const segments = path.split('.');
     return function (obj) {
         for (let i = 0; i < segements; i ++) {
             if (!obj) return;
             obj = obj[segements];
         }
         return obj;
     }
 }

 ## 递归侦测所有的key

 怎么样实现所有的属性都进行侦测呢？ 实现一个Observer类, 将Ojbect的所有属性转换为getter/setter的形式

 export class Observer {
     constructor() {
         this.value = value;

         if (!Array.isArray(value)) {
             this.walk(value);
         }
     }

     walk (obj) {
         const keys = Object.keys(obj);
         for (let i = 0; i < key.length; i ++) {
             defineReactive(obj, keys[i], obj[keys[i]])
         }
     }
 }

 function defineReactive(data, key ,val) {
    // 新增 递归属性
    if (typeof val === 'object') {
        new Observer(val);
    }
    let dep = new Dep();
    Object.defineProperty(data, key, {
        enumerable: true,
        configurable: true,
        get: function() {
            dep.depend();
            return val;
        },
        set: function() {
            if (val === newVal) {
                    return
            }   
            val = newVal;
            dep.notify();
        },
    })
}

## 关于Object的问题

这个追踪方式, 数据如果发生了变化, vue.js追踪不到 例如： this.obj.name = 'berwin'; 新增了一个name属性
vue.js 提供了两个API来解决这个问题 vm.$set 和 vm.$delete

## 总结

Data => Observer => Data(getter, setter) => Watcher => '通知外界' => 外界
                                         => '收集依赖' '通知依赖' => Dep => 通知Wathcer

1、 Oject 通过 Object.defineProperty (Observer类) 将属性转化为getter/setter的形式, getter收集依赖, setter通知依赖
2、 通过 dep 储存依赖、删除依赖、向依赖发送消息
3、 每一个依赖Wathcer, 只有触发的 getter 才会收集依赖, 数据发生变化，循环依赖列表 dep , 把所有依赖 Watcher 都通知一遍。



